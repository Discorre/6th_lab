//#include <iostream>
//#include <vector>
//#include <cstdlib>
//#include <ctime>
//
//using namespace std;
//
//// Функция для генерации случайного числа в диапазоне [min, max]
//static int randomInRange(int min, int max) {
//    return rand() % (max - min + 1) + min; // Генерация случайного числа в диапазоне [min, max]
//}
//
//// Функция для вычисления суммы цифр числа
//static int digitSum(int num) {
//    int sum = 0;
//    while (num != 0) { // Пока число не равно нулю
//        sum += num % 10; // Добавляем к сумме последнюю цифру числа
//        num /= 10; // Уменьшаем число, удаляя последнюю цифру
//    }
//    return sum; // Возвращаем сумму цифр числа
//}
//
//int main() {
//    setlocale(LC_ALL, "ru"); // Установка локали для вывода на русском языке
//
//    // Инициализация генератора случайных чисел
//    srand(time(0)); // Инициализация генератора случайных чисел по текущему времени
//
//    int M, N;
//    cout << "Введите количество строк M: "; // Вывод сообщения
//    cin >> M; // Считывание количества строк
//    cout << "Введите количество столбцов N: "; // Вывод сообщения
//    cin >> N; // Считывание количества столбцов
//
//    // Создание и инициализация матрицы размера M x N
//    vector<vector<int>> matrix(M, vector<int>(N)); // Создание матрицы с размерами M x N и заполнение нулями
//    for (int i = 0; i < M; ++i) { // Перебор строк матрицы
//        for (int j = 0; j < N; ++j) { // Перебор элементов в строке
//            matrix[i][j] = randomInRange(100, 200); // Заполнение элемента случайным числом в диапазоне [100, 200]
//        }
//    }
//
//    cout << endl << "Исходная матрица:" << endl; // Вывод сообщения
//    for (const auto& row : matrix) { // Перебор строк матрицы
//        for (int num : row) { // Перебор элементов в строке
//            cout << num << "\t"; // Вывод элемента и табуляция
//        }
//        cout << endl; // Переход на новую строку
//    }
//
//    // Вывод суммы цифр для каждой строки и поиск строки с максимальной суммой цифр
//    int maxDigitSum = 0; // Максимальная сумма цифр
//    int maxDigitSumRow = -1; // Индекс строки с максимальной суммой цифр
//    cout << endl << "Суммы цифр элементов в каждой строке:" << endl; // Вывод сообщения
//    for (int i = 0; i < M; ++i) { // Перебор строк матрицы
//        int rowSum = 0; // Сумма цифр в текущей строке
//        for (int j = 0; j < N; ++j) { // Перебор элементов в строке
//            rowSum += digitSum(matrix[i][j]); // Добавление суммы цифр текущего элемента к сумме строки
//        }
//        cout << "Строка " << i + 1 << ": " << rowSum << endl; // Вывод суммы цифр для текущей строки
//        if (rowSum > maxDigitSum) { // Если сумма цифр текущей строки больше максимальной
//            maxDigitSum = rowSum; // Обновление максимальной суммы
//            maxDigitSumRow = i; // Обновление индекса строки с максимальной суммой цифр
//        }
//    }
//
//    if (maxDigitSumRow != -1) { // Если была найдена строка с максимальной суммой цифр
//        cout << endl << "Строка с максимальной суммой цифр элементов: " << maxDigitSumRow + 1 << endl; // Вывод информации о найденной строке
//    }
//    else { // Если матрица пуста
//        cout << "Матрица пуста!" << endl; // Вывод сообщения об этом
//    }
//
//    return 0; // Возврат нуля как признак успешного завершения программы
//}
