//#include <iostream>
//#include <vector>
//#include <cstdlib> // Для функций rand() и srand()
//#include <ctime>   // Для функции time()
//
//using namespace std;
//
//// Функция для генерации случайного числа в диапазоне [min, max]
//static int randomInRange(int min, int max) {
//    return rand() % (max - min + 1) + min; // Генерация случайного числа в диапазоне [min, max]
//}
//
//// Функция для вывода матрицы на экран
//static void printMatrix(const vector<vector<int>>& matrix) {
//    for (const auto& row : matrix) { // Перебор строк матрицы
//        for (int num : row) { // Перебор элементов в строке
//            cout << num << "\t"; // Вывод элемента и табуляция
//        }
//        cout << endl; // Переход на новую строку
//    }
//}
//
//// Функция для обмена значений двух элементов
//static void swap(int& a, int& b) {
//    int temp = a; // Временное сохранение значения a
//    a = b; // Присваивание a значения b
//    b = temp; // Присваивание b временного значения
//}
//
//int main() {
//    setlocale(LC_ALL, "ru"); // Установка локали для вывода на русском языке
//    // Инициализация генератора случайных чисел
//    srand(time(0)); // Инициализация генератора случайных чисел по текущему времени
//
//    int M = 3, N = 4; // Инициализация размеров матрицы
//
//    // Создание и инициализация матрицы размера M x N
//    vector<vector<int>> matrix(M, vector<int>(N)); // Создание матрицы с размерами M x N и заполнение нулями
//    for (int i = 0; i < M; ++i) { // Перебор строк матрицы
//        for (int j = 0; j < N; ++j) { // Перебор элементов в строке
//            matrix[i][j] = randomInRange(10, 50); // Заполнение элемента случайным числом в диапазоне [10, 50]
//        }
//    }
//
//    cout << "Исходная матрица:" << endl; // Вывод сообщения
//    printMatrix(matrix); // Вывод исходной матрицы
//
//    // Обмен максимального и минимального элементов в каждой строке
//    for (int i = 0; i < M; ++i) { // Перебор строк матрицы
//        int minIdx = 0, maxIdx = 0; // Инициализация индексов минимального и максимального элементов
//        for (int j = 1; j < N; ++j) { // Перебор элементов в строке
//            if (matrix[i][j] < matrix[i][minIdx]) // Если текущий элемент меньше минимального
//                minIdx = j; // Обновление индекса минимального элемента
//            if (matrix[i][j] > matrix[i][maxIdx]) // Если текущий элемент больше максимального
//                maxIdx = j; // Обновление индекса максимального элемента
//        }
//        swap(matrix[i][minIdx], matrix[i][maxIdx]); // Обмен минимального и максимального элементов в текущей строке
//    }
//
//    cout << "Матрица после обмена минимальных и максимальных элементов в каждой строке:" << endl; // Вывод сообщения
//    printMatrix(matrix); // Вывод матрицы после обмена
//
//    // Создание новой матрицы с минимальными и максимальными элементами
//    vector<vector<int>> newMatrix(2, vector<int>(N)); // Создание новой матрицы с двумя строками и N столбцами
//    for (int j = 0; j < N; ++j) { // Перебор столбцов матрицы
//        int minVal = matrix[0][j], maxVal = matrix[0][j]; // Инициализация минимального и максимального значений
//        for (int i = 1; i < M; ++i) { // Перебор строк матрицы
//            if (matrix[i][j] < minVal) // Если текущий элемент меньше минимального
//                minVal = matrix[i][j]; // Обновление минимального значения
//            if (matrix[i][j] > maxVal) // Если текущий элемент больше максимального
//                maxVal = matrix[i][j]; // Обновление максимального значения
//        }
//        newMatrix[0][j] = minVal; // Присваивание минимального значения в первую строку новой матрицы
//        newMatrix[1][j] = maxVal; // Присваивание максимального значения во вторую строку новой матрицы
//    }
//
//    cout << "Новая матрица с минимальными и максимальными элементами:" << endl; // Вывод сообщения
//    printMatrix(newMatrix); // Вывод новой матрицы
//
//    return 0; // Возврат нуля как признак успешного завершения программы
//}
