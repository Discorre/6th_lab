//#include <iostream> // Подключение стандартной библиотеки ввода-вывода
//#include <iomanip> // Подключение библиотеки для работы с форматированным выводом
//
//using namespace std; // Использование пространства имен std
//
//int main() { // Основная функция программы
//    setlocale(LC_ALL, "ru"); // Установка локали для вывода на русском языке
//
//    int n = 4, cnt; // Объявление переменных: n - размерность матрицы, cnt - счётчик
//    double M = -0.77, N = 0.16, P = 1.12; // Объявление переменных с плавающей точкой
//
//    // Исходная система линейных уравнений представлена в виде матрицы
//    double matrix[4][5] = {
//        {M, -0.04, 0.21, -18, -1.24}, // Первая строка матрицы
//        {0.25, -1.23, N, -0.09, P},    // Вторая строка матрицы
//        {-0.21, N, 0.8, -0.13, 2.56},  // Третья строка матрицы
//        {0.15, -1.31, 0.06, P, M}      // Четвёртая строка матрицы
//    };
//
//    cout << "Система уравнений в виде матрицы:" << endl; // Вывод заголовка
//    for (int i = 0; i < n; i++) { // Перебор строк матрицы
//        cnt = 1; // Сброс счётчика
//        cout << "|"; // Вывод символа начала строки матрицы
//        for (int j = 0; j < n + 1; j++) { // Перебор элементов строки
//            printf("%7.2f", matrix[i][j]); // Вывод элемента матрицы с двумя знаками после запятой
//            if (cnt == n) printf("|"); // Вывод вертикальной черты после последнего элемента в строке
//            cnt++; // Увеличение счётчика
//        }
//        cout << "|" << endl; // Вывод символа конца строки матрицы
//    }
//
//    // Прямой ход метода Гаусса
//    for (int i = 0; i < n; i++) {
//        for (int j = n; j >= i; j--)
//            matrix[i][j] /= matrix[i][i]; // Деление элементов строки на первый элемент строки
//        for (int j = i + 1; j < n; j++) {
//            for (int k = n; k >= i; k--)
//                matrix[j][k] -= matrix[j][i] * matrix[i][k]; // Вычитание строки, умноженной на коэффициент, из последующих строк
//        }
//    }
//
//    cout << endl << "Прямой ход:" << endl; // Вывод заголовка прямого хода
//    for (int i = 0; i < n; i++) { // Перебор строк матрицы после прямого хода
//        cnt = 1; // Сброс счётчика
//        cout << "|"; // Вывод символа начала строки матрицы
//        for (int j = 0; j < n + 1; j++) { // Перебор элементов строки
//            printf("%7.2f", matrix[i][j]); // Вывод элемента матрицы с двумя знаками после запятой
//            if (cnt == n) printf("|"); // Вывод вертикальной черты после последнего элемента в строке
//            cnt++; // Увеличение счётчика
//        }
//        cout << "|" << endl; // Вывод символа конца строки матрицы
//    }
//
//    // Обратный ход метода Гаусса
//    for (int i = n - 1; i > 0; i--) {
//        for (int j = i - 1; j >= 0; j--) {
//            for (int k = n; k >= 0; k--) {
//                matrix[j][k] -= matrix[j][i] * matrix[i][k]; // Вычитание строки, умноженной на коэффициент, из предыдущих строк
//            }
//        }
//    }
//
//    cout << endl << "Обратный ход:" << endl; // Вывод заголовка обратного хода
//    double xx[4]{}; // Создание массива для хранения решений
//
//    for (int i = 0; i < n; i++) { // Перебор строк матрицы после обратного хода
//        xx[i] = matrix[i][4]; // Добавление значения решения в массив
//        cout << "|"; // Вывод символа начала строки матрицы
//        cnt = 1; // Сброс счётчика
//        for (int j = 0; j < n + 1; j++) { // Перебор элементов строки
//            printf("%7.2f", matrix[i][j]); // Вывод элемента матрицы с двумя знаками после запятой
//            if (cnt == n) printf("|"); // Вывод вертикальной черты после последнего элемента в строке
//            cnt++; // Увеличение счётчика
//        }
//        cout << "|" << endl; // Вывод символа конца строки матрицы
//    }
//
//    cout << endl; // Пустая строка для разделения вывода
//
//    for (int i = 0; i < n; i++) { // Перебор решений
//        cout << setprecision(4) << "x" << i + 1 << " = " << xx[i] << endl; // Вывод значения переменной с четырьмя знаками после запятой
//    }
//
//    return 0; // Возврат нуля как признак успешного завершения программы
//}
